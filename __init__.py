# The MIT License (MIT)
#
# Copyright (c) 2024 Oscar Butler-Aldridge
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is furnished
# to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in all
# copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.

import datetime
import http.server
import json
import math
import os
import platform
import sys
import time
from typing import TYPE_CHECKING, Callable, Literal
from urllib.request import urlopen
if TYPE_CHECKING:
    from pathlib import Path

Command = Literal[
    "run-service", "run-checks", "schedule-checks",
    "run-server", "check-notification"]
NotificationMechanism = Literal["sh-command"]
CheckType = Literal["request_url"]
Status = Literal["succeeded", "failed"]

COMMAND_RUN_SERVICE        : Command = "run-service"
COMMAND_RUN_CHECKS         : Command = "run-checks"
COMMAND_SCHEDULE_CHECKS    : Command = "schedule-checks"
COMMAND_RUN_SERVER         : Command = "run-server"
COMMAND_CHECK_NOTIFICATION : Command = "check-notification"
CHECK_TYPE_REQUEST_URL : CheckType = "request_url"
STATUS_SUCCEEDED : Status = "succeeded"
STATUS_FAILED    : Status = "failed"
DEFAULT_EXPECTED_REPONSE_RANGE = (100, 400)
NOTIFICATION_MECHANISM_SH_COMMAND: NotificationMechanism = "sh-command"
_STATE_COUNTING_NUMBER_OF_CHECKS = 0
_STATE_RUNNING_CHECKS            = 1
_STATE_SERVING_MONITORING_PAGE   = 2

_is_dev                                           = False
_command                                          = ""
_state                                            = -1
_checks_file_path                                 = "./checks.jsonl"
_checks_file_handle                               = None
_checks_n                                         = 0
_current_check                                    = 0
_server_ip                                        = "127.0.0.1"
_server_port                                      = 8000
_schedule_poll_interval                           = 60*5;
_schedule_run_checks_interval                     = 60*30;
_schedule_remove_old_checks_interval              = 60*60*12
_checks_max_age                                   = 60*60*24*5
_expected_response_status_ranges                  = [DEFAULT_EXPECTED_REPONSE_RANGE]
_client_id_to_last_notification_request_timestamp = {}
_client_id                                        = ""
_notification_mechanism                           = NOTIFICATION_MECHANISM_SH_COMMAND
_notification_sh_command_template                 = "echo '<message>'"


def dev() -> None:
    """Enable developer mode.

    Developer mode if disabled by default."""
    global _is_dev
    _is_dev = True


def ip(server_ip: str) -> None:
    """Configure the server's IP address.

    If not configured, the ip defaults to '127.0.0.1'."""
    global _server_ip
    _server_ip = server_ip


def port(server_port: int) -> None:
    """Configure the server's port number.

    If not configured, the port number defaults to '8000'."""
    global _server_port
    _server_port = server_port


def poll_interval(interval: float) -> None:
    """Configure the sleep time in seconds between iterations of the
    scheduler loop.

    If not configured, the interval defaults to 60*5=300,
    i.e. 5 minutes."""
    global _schedule_poll_interval
    _schedule_poll_interval = interval


def run_checks_interval(interval: float) -> None:
    """Configure the interval, in seconds, at which checks will be ran.

    Whether checks should be ran is tested every iteration of the
    scheduler loop. This means that `interval` only functions as an
    approximate parameter.

    If not configured, the interval defaults to 60*30=1800,
    i.e. 30 minutes."""
    global _schedule_run_checks_interval
    _schedule_run_checks_interval = interval


def remove_old_checks_interval(interval: float) -> None:
    """Configure the interval, in seconds, at which the server will
    check for and remove checks older than the configured max age
    (see `checks_max_age`).

    If not configured, the interval defaults to 60*60*12,
    i.e. ~12h."""
    global _schedule_remove_old_checks_interval
    _schedule_remove_old_checks_interval = interval


def checks_max_age(max_age: float) -> None:
    """Configure the maximum number of seconds that checks will
    be stored for.

    If not configured. the interval defaults to 60*60*24*5,
    i.e. ~5 days."""
    global _checks_max_age
    _checks_max_age = max_age


def client_id(id: str) -> None:
    """Configure the client ID that will be used for commands such as
    `check-notification`.

    If not configured, the value of the standard library's
    `platform.node()` will be used (on demand)."""
    global _client_id
    _client_id = id


def checks_db_file(file_path: "str | Path") -> None:
    """Configure the path to the file where check results will be
    stored by the server.

    If not configured, the path "./checks.jsonl" will be used.

    Check results are stored as individual JSON objects on each
    line; consider giving the file path the extension "jsonl"."""
    global _checks_file_path
    _checks_file_path = file_path


def notification_mechanism(mechanism: NotificationMechanism) -> None:
    """Configure the notification mechanism used for the
    `check-notifications` command.

    If not configured, the mechanism defaults to 'sh-command',
    meaning commands will be run with the Posix shell /bin/sh."""
    global _notification_mechanism
    _notification_mechanism = mechanism


def notification_sh_command(command_template: str) -> None:
    """Configure the Posix shell command used to display notifications
    on a client.

    If not configured, the command template "echo '<message>'" will
    be used.

    Note that the string argument for this function must contain
    <message> as a placeholder for the notification message!"""
    global _notification_sh_command_template
    _notification_sh_command_template = command_template


def run_command(command: Command, handler: Callable | None = None) -> None:
    """Start the monitoring server, check for notifications as a client,
    etc. by running a specific command.


    Consider the following script:

        ```
        check_google_up.py

        import sys
        from home_net_monitoring import *

        def main():
            role = sys.argv[1]
            ip("XXX.XXX.XXX.XXX")
            port(8000)
            if role == "server":
                run_command("run-service", command_handler)
            if role == "client":
                run_command("check-notification", command_handler)

        def command_handler():
            if next_check():
                request_url("https://google.com")

        main()
        ```


    When we run this script on our server `python3 check_google_up.py server`,
    the lines

        ```
        if next_check():
            request_url("https://google.com")
        ```

    tell the server to run a "check" at a scheduled interval. Sepcifically,
    a request is sent to the URL "https://google.com". The result of the
    check is then recorded by the server. The result's status is set to
    "succeeded" if the URL responds with a success status code; otherwise
    the status is set to "failed".
    An aggregated visualization of these checks is served on a monitoring
    webpage at the server's port 8000, "http://XXX.XXX.XXX.XXX:8000".


    When we run this script on our local machine
    `python3 check_google_up.py client`, the script will act as a client
    an make the request
    "http://XXX.XXX.XXX.XXX:8000/check-notification?client-id=local-hostname".
    to the server. The server will response with a warning notification
    message if the check to "https://google.com" failed since the last
    time the client made this request. If the client receives a warning
    notification, it will echo it to the standard output
    (see `notification_sh_command` to change the behaviour from echo
    to something more useful).
    """
    global _command
    _command = command
    if _command == COMMAND_RUN_SERVICE:
        print("Spawning server as child process...")
        is_parent_proc = os.fork()
        is_child_proc  = not is_parent_proc
        if is_child_proc:
            print("Running server.")
            run_server()
        elif is_parent_proc:
            print("Running scheduled checks on main process...")
            schedule_checks(handler)
        return
    elif _command == COMMAND_RUN_CHECKS:
        run_checks(handler)
        return
    elif _command == COMMAND_SCHEDULE_CHECKS:
        schedule_checks(handler)
        return
    elif _command == COMMAND_RUN_SERVER:
        run_server()
        return
    elif _command == COMMAND_CHECK_NOTIFICATION:
        if _notification_mechanism == NOTIFICATION_MECHANISM_SH_COMMAND:
            global _client_id
            if _client_id == "":
                _client_id = str(platform.node())
            url = "http://" + _server_ip + ":" + str(_server_port) + \
                "/client-notification?client-id=" + _client_id
            response = None
            message  = None
            try:
                response = urlopen(url)
            except:
                message = "ERROR: Server unreachable!"
            else:
                if response.status != 200:
                    message = "ERROR: Unexpected server response!"
                else:
                    response_body = response.read().decode("utf-8")
                    if response_body.startswith("notification\n"):
                        message = response_body[len("notification\n"):]
            finally:
                if response is not None:
                    response.close()
            if message is None:
                return
            cmd = _notification_sh_command_template.replace("<message>", message)
            os.execvp("/bin/sh", ["/bin/sh", "-c", cmd])
    raise Exception


def run_checks(func):
    global _state, _checks_file_handle

    _state = _STATE_COUNTING_NUMBER_OF_CHECKS
    func()
    _state = _STATE_RUNNING_CHECKS
    with open(_checks_file_path, "a") as _checks_file_handle:
        while _current_check < _checks_n:
            timestamp = math.floor(time.time())
            if _checks_file_handle is None: raise Exception
            _checks_file_handle.write('{"timestamp": ' + str(timestamp) + ', "checks": [')
            func()
            _checks_file_handle.write("]}\n")


def schedule_checks(func):
    t0 = time.time()
    checks_generation  = 0
    removal_generation = 0
    while True:
        time.sleep(_schedule_poll_interval)

        t = time.time()

        if t > t0 + checks_generation*_schedule_run_checks_interval:
            print("Running scheduled checks...")
            run_checks(func)
            print("Ran checks.")

            checks_generation += 1

        if t > t0 + removal_generation*_schedule_remove_old_checks_interval:
            print("Removing old checks...")
            min_t = t - _checks_max_age
            new_content = ""
            with open(_checks_file_path, "r") as f:
                for line in f.readlines():
                    check_t = json.loads(line)["timestamp"]
                    if check_t > min_t:
                        new_content += line
            with open(_checks_file_path, "w") as f:
                f.write(new_content)
            print("Removed old checks.")

            removal_generation += 1


def next_check() -> bool:
    """Use this function in if conditions where the condition body
    declares a single check.

    For example:

        ```
        if next_check():
            request_url("https://duckduckgo.com")
        if next_check():
            request_url("https://google.com")
        ```

    declarse to separate checks that check whether the two URLs
    respond with successful HTTP status codes."""
    if _state == _STATE_COUNTING_NUMBER_OF_CHECKS:
        global _checks_n
        _checks_n += 1
        return False
    if _state == _STATE_RUNNING_CHECKS:
        global _current_check
        _current_check += 1
        return True
    if _state == _STATE_SERVING_MONITORING_PAGE:
        return False
    raise Exception


def expect_response_status(*args: int | tuple[int, int]) -> None:
    """Set the HTTP reponse status code that the next `request_url`
    call must receive for a check to succeed.

    This function accepts one or more arguments that are either
    a) an integer for a single HTTP status code or
    b) a tuple of two integers for an inclusive range of HTTP
       status codes."""
    _expected_response_status_ranges.clear()
    for arg in args:
        arg_type = type(arg)
        if arg_type is int:
            status = arg
            _expected_response_status_ranges.append((status, status))
        elif arg_type is tuple:
            status_range = arg
            _expected_response_status_ranges.append(status_range)
        else:
            raise TypeError


def request_url(url: str) -> None:
    """Make a request to the specified URL, setting the current
    check to "failed", if an unexpected HTTP response status code
    is received.

    Example:

        ```
        if next_check():
            expect_reponse_status(200)
            # Explicitly set expected response status
            request_url("https://duckduckgo.com")
        if next_check():
            # Response status is implicit
            request_url("https://google.com")
        ```
    """
    global _expected_response_status_ranges

    status = STATUS_FAILED

    t0 = time.time()
    response = None
    try:
        response = urlopen(url)
    except:
        pass
    else:
        for min_status, max_status in _expected_response_status_ranges:
            if min_status <= response.status <= max_status:
                status = STATUS_SUCCEEDED
                break;

        _ = response.read()
    finally:
        if response is not None:
            response.close()
    t1 = time.time()

    response_time = t1 - t0

    if _checks_file_handle is None: raise Exception
    _checks_file_handle.write('{"type": "'  + CHECK_TYPE_REQUEST_URL + '", ')
    _checks_file_handle.write('"status": "' + status                 + '", ')
    _checks_file_handle.write('"url": "'    + url                    + '", ')
    _checks_file_handle.write('"response_time_in_secs": '
                                           + str(response_time)     + '}'  )
    if _current_check < _checks_n:
        _checks_file_handle.write(", ")

    # Resetting the response ranges mean that users will have to call
    # `expected_response_status` more often but prevent users from forgetting
    # to manually revert back to the defaults
    _expected_response_status_ranges = [DEFAULT_EXPECTED_REPONSE_RANGE];


def run_server():
    is_first_load = True

    class RequestHandler(http.server.BaseHTTPRequestHandler):

        def do_GET(self):
            if self.path == "/":
                needs_reload = False
                if _is_dev:
                    nonlocal is_first_load
                    if is_first_load:
                        is_first_load = False
                    else:
                        needs_reload = True

                if needs_reload:
                    is_parent_proc = os.fork() == 0
                    is_child_proc = not is_parent_proc
                    if is_parent_proc:
                        # Respond with a HTML page that will auto refresh after
                        # a timeout (`<meta http-equiv=...`)
                        response_content = \
                                '<!DOCTYPE html>' \
                                '<html style="color:#FFF;background-color:#000">' \
                                '<head>' \
                                '<meta http-equiv="refresh" content="0.1">' \
                                '</head>' \
                                '<body>(dev) respawning new process...</body>'
                        self.send_response(200)
                        self.send_header("Content-Type", "text/html; charset=utf-8")
                        self.send_header("Content-Length", str(len(response_content)))
                        self.end_headers()
                        self.wfile.write(bytes(response_content, "utf-8"))

                        # Then exit the parent process
                        sys.stdout.flush()
                        sys.stderr.flush()
                        exit(0)
                    elif is_child_proc:
                        from .embed_javascript import embed_javascript
                        print("Reembedding JavaScript...")
                        embed_javascript()
                        print("Embedded JavaScript.")
                        print("Respawning new process...")
                        # Replace the child process with a new process with the same
                        # executable and args
                        if hasattr(sys, "orig_argv"):
                            os.execvp(sys.executable, sys.orig_argv)
                        else:
                            os.execvp(sys.executable, [sys.executable] + sys.argv)
                else:
                    response_content = build_monitoring_page_html()
                    self.send_response(200)
                    self.send_header("Content-Type", "text/html; charset=utf-8")
                    self.send_header("Content-Length", str(len(response_content)))
                    self.end_headers()
                    self.wfile.write(bytes(response_content, "utf-8"))
            elif self.path == "/index.js":
                self.send_response(200)
                self.send_header("Content-Type", "application/javascript; charset=utf-8")
                self.send_header("Content-Length", str(len(EMBEDDED_JAVASCRIPT_FILE_BYTES)))
                self.end_headers()
                self.wfile.write(EMBEDDED_JAVASCRIPT_FILE_BYTES)
            elif self.path.startswith("/checks"):
                # Attempt to parse start and end timestamps in query string
                start_timestamp = -1
                end_timestamp   = -1
                try:
                    i = len("/checks")
                    if self.path[i] != '?':
                        raise
                    i += 1
                    if self.path[i:i + 6] != "start=":
                        raise
                    i += 6
                    timestamp_start_i = i
                    while self.path[i].isdigit():
                        i += 1
                    start_timestamp = int(self.path[timestamp_start_i:i])
                    if self.path[i] != '&':
                        raise
                    i += 1
                    if self.path[i:i + 4] != "end=":
                        raise
                    i += 4
                    timestamp_start_i = i
                    while i < len(self.path) and self.path[i].isdigit():
                        i += 1
                    end_timestamp = int(self.path[timestamp_start_i:i])
                # Reponse with 400 on failure
                except Exception:
                    response_content = "Invalid /checks request!"
                    self.send_response(400)
                    self.send_header("Content-Type", "text/plain; charset=utf-8")
                    self.send_header("Content-Length", str(len(response_content)))
                    self.end_headers()
                    self.wfile.write(bytes(response_content, "utf-8"))
                # Respond with JSON on success
                else:
                    timestamp_line_offset = len('{"timestamp": ')
                    response_content = "["  # ] <- because Vim
                    with open(_checks_file_path) as f:
                        first_item = True
                        for line in f.readlines():
                            i = timestamp_start_i = timestamp_line_offset
                            while i < len(line) and line[i].isdigit():
                                i += 1
                            timestamp = int(line[timestamp_start_i:i])
                            if start_timestamp <= timestamp <= end_timestamp:
                                if first_item:
                                    first_item = False
                                else:
                                    response_content += ", "
                                response_content += line[:-1]
                    response_content += "]"

                    self.send_response(200)
                    self.send_header("Content-Type", "application/json; charset=utf-8")
                    self.send_header("Content-Length", str(len(response_content)))
                    self.end_headers()
                    self.wfile.write(bytes(response_content, "utf-8"))
            elif self.path.startswith("/client-notification"):
                expected_route_start = "/client-notification?client-id="
                if not self.path.startswith(expected_route_start):
                    response_content = "Invalid /client-notification request!"
                    self.send_response(400)
                    self.send_header("Content-Type", "text/plain; charset=utf-8")
                    self.send_header("Content-Length", str(len(response_content)))
                    self.end_headers()
                    self.wfile.write(bytes(response_content, "utf-8"))

                client_id = self.path[len(expected_route_start):]
                last_notification_request_timestamp = \
                    _client_id_to_last_notification_request_timestamp.get(client_id)
                if last_notification_request_timestamp is None:
                    last_notification_request_timestamp = 0

                failure_msgs_since_last_notification_request = []
                with open(_checks_file_path) as f:
                    for line in f.readlines():
                        if STATUS_FAILED not in line:
                            continue

                        line_json = json.loads(line)
                        timestamp = line_json["timestamp"]

                        if timestamp < last_notification_request_timestamp:
                            continue

                        for check in line_json["checks"]:
                            if check["status"] == STATUS_SUCCEEDED:
                                continue

                            if check["type"] == CHECK_TYPE_REQUEST_URL:
                                url = check["url"]
                                failure_datetime_str = \
                                        datetime.datetime.fromtimestamp(timestamp)\
                                        .ctime()
                                failure_msgs_since_last_notification_request.append(
                                        'Request to the URL "' + url +
                                        '" failed at "' + failure_datetime_str + '"')

                _client_id_to_last_notification_request_timestamp[client_id] = time.time()

                if failure_msgs_since_last_notification_request:
                    response_content = "notification\n"
                    for msg in failure_msgs_since_last_notification_request:
                        response_content += msg + "\n"
                    self.send_response(200)
                    self.send_header("Content-Type", "text/plain; charset=utf-8")
                    self.send_header("Content-Length", str(len(response_content)))
                    self.end_headers()
                    self.wfile.write(bytes(response_content, "utf-8"))
                else:
                    response_content = "no_notification"
                    self.send_response(200)
                    self.send_header("Content-Type", "text/plain; charset=utf-8")
                    self.send_header("Content-Length", str(len(response_content)))
                    self.end_headers()
                    self.wfile.write(bytes(response_content, "utf-8"))
            else:
                response_content = "File not found!"
                self.send_response(404)
                self.send_header("Content-Type", "text/plain; charset=utf-8")
                self.send_header("Content-Length", str(len(response_content)))
                self.end_headers()
                self.wfile.write(bytes(response_content, "utf-8"))

    server = http.server.HTTPServer(
            (_server_ip, _server_port),
            RequestHandler)
    server.serve_forever()


def build_monitoring_page_html():
    NODE_TYPE_HTML     = 0
    NODE_TYPE_CSS_RULE = 1

    html = ""
    node_stack = []

    def tag(name, **attrs):
        nonlocal html
        html += "<" + name
        for attr_name, attr_value in attrs.items():
            attr_name = attr_name.replace("_", "-")
            html += " " + attr_name + "=\"" + attr_value + "\""
        html += ">"
        node_stack.append((NODE_TYPE_HTML, name))
        return True

    def end(void=False):
        nonlocal html
        node_type, node_name = node_stack.pop()
        if node_type == NODE_TYPE_HTML:
            if not void:
                html += "</" + node_name + ">"
        elif node_type == NODE_TYPE_CSS_RULE:
            html += "} "

    def text(s):
        nonlocal html
        html += s

    def doctype():
        nonlocal html
        html += "<!DOCTYPE HTML>"

    def rule(css_selector):
        nonlocal html
        html += css_selector + " {"  # } <- becuase Vim
        node_stack.append((NODE_TYPE_CSS_RULE, css_selector))
        return True

    def prop(css_prop_name, css_prop_value):
        nonlocal html
        html += css_prop_name + ": " + str(css_prop_value) + "; "

    page_title = "Monitoring"
    doctype()
    if tag("html"):
        if tag("head"):
            tag("title"); text(page_title); end()
            tag("script", src="index.js"); end()
            if tag("style"):
                if rule("html, body, main"):
                    prop("padding", 0)
                    prop("margin", 0)
                    prop("color", "#FFF")
                    prop("background-color", "#000")
                    prop("font-family", "sans-serif")
                end()
                if rule("main"):
                    prop("margin", "32px 64px")
                end()
                if rule(".status-and-description-line"):
                    prop("line-height", "2em")
                    prop("padding-bottom", "0.5em")
                end()
                if rule(".status-pill"):
                    prop("padding", "0.25em 0.75em")
                    prop("border-radius", "2em")
                    prop("color", "#000")
                    prop("background-color", "#666")
                    prop("margin-right", "1em")
                end()
                if rule(".status-pill--succeeded"):
                    prop("background-color", "#0FF")
                end()
                if rule(".status-pill--failed"):
                    prop("background-color", "#F00")
                end()
            end()
        end()
        if tag("body"):
            if tag("main"):
                tag("h1"); text(page_title); end()
                tag("div", id="checks"); end()
            end()
        end()
    end()

    return html


# Gap here because EMBEDDED_JAVASCRIPT_FILE_BYTES lags my NeoVim...
# proabably because of the LSP and/or line wrapping.

























































EMBEDDED_JAVASCRIPT_FILE_BYTES = b"\x63\x6F\x6E\x73\x74\x20\x43\x48\x45\x43\x4B\x5F\x54\x59\x50\x45\x5F\x52\x45\x51\x55\x45\x53\x54\x5F\x55\x52\x4C\x20\x3D\x20\x22\x72\x65\x71\x75\x65\x73\x74\x5F\x75\x72\x6C\x22\x3B\x0A\x63\x6F\x6E\x73\x74\x20\x53\x54\x41\x54\x55\x53\x5F\x53\x55\x43\x43\x45\x45\x44\x45\x44\x20\x3D\x20\x22\x73\x75\x63\x63\x65\x65\x64\x65\x64\x22\x3B\x0A\x63\x6F\x6E\x73\x74\x20\x53\x54\x41\x54\x55\x53\x5F\x46\x41\x49\x4C\x45\x44\x20\x20\x20\x20\x3D\x20\x22\x66\x61\x69\x6C\x65\x64\x22\x3B\x0A\x0A\x6C\x65\x74\x20\x74\x69\x6D\x65\x57\x69\x6E\x64\x6F\x77\x49\x6E\x53\x65\x63\x73\x20\x20\x20\x3D\x20\x36\x30\x2A\x36\x30\x2A\x32\x34\x2A\x35\x3B\x0A\x6C\x65\x74\x20\x70\x6F\x6C\x6C\x49\x6E\x74\x65\x72\x76\x61\x6C\x49\x6E\x53\x65\x63\x73\x20\x3D\x20\x31\x30\x3B\x0A\x6C\x65\x74\x20\x63\x75\x72\x72\x65\x6E\x74\x54\x69\x6D\x65\x73\x74\x61\x6D\x70\x49\x6E\x53\x65\x63\x73\x3B\x0A\x6C\x65\x74\x20\x61\x67\x67\x72\x65\x67\x61\x74\x65\x43\x68\x65\x63\x6B\x73\x3B\x0A\x6C\x65\x74\x20\x63\x61\x6E\x76\x61\x73\x53\x74\x61\x74\x65\x42\x79\x43\x68\x65\x63\x6B\x73\x41\x67\x67\x72\x65\x61\x74\x65\x49\x64\x20\x3D\x20\x6E\x65\x77\x20\x4D\x61\x70\x28\x29\x3B\x0A\x0A\x61\x73\x79\x6E\x63\x20\x66\x75\x6E\x63\x74\x69\x6F\x6E\x20\x6D\x61\x69\x6E\x28\x29\x20\x7B\x0A\x20\x20\x20\x20\x75\x70\x64\x61\x74\x65\x28\x29\x3B\x0A\x20\x20\x20\x20\x73\x65\x74\x49\x6E\x74\x65\x72\x76\x61\x6C\x28\x75\x70\x64\x61\x74\x65\x2C\x20\x70\x6F\x6C\x6C\x49\x6E\x74\x65\x72\x76\x61\x6C\x49\x6E\x53\x65\x63\x73\x2A\x31\x30\x30\x30\x29\x3B\x0A\x0A\x20\x20\x20\x20\x77\x69\x6E\x64\x6F\x77\x2E\x61\x64\x64\x45\x76\x65\x6E\x74\x4C\x69\x73\x74\x65\x6E\x65\x72\x28\x22\x72\x65\x73\x69\x7A\x65\x22\x2C\x20\x28\x29\x20\x3D\x3E\x20\x72\x65\x6E\x64\x65\x72\x41\x67\x67\x72\x65\x67\x61\x74\x65\x43\x68\x65\x63\x6B\x73\x28\x61\x67\x67\x72\x65\x67\x61\x74\x65\x43\x68\x65\x63\x6B\x73\x29\x29\x3B\x0A\x7D\x0A\x0A\x61\x73\x79\x6E\x63\x20\x66\x75\x6E\x63\x74\x69\x6F\x6E\x20\x75\x70\x64\x61\x74\x65\x28\x29\x20\x7B\x0A\x20\x20\x20\x20\x63\x75\x72\x72\x65\x6E\x74\x54\x69\x6D\x65\x73\x74\x61\x6D\x70\x49\x6E\x53\x65\x63\x73\x20\x3D\x20\x4D\x61\x74\x68\x2E\x63\x65\x69\x6C\x28\x44\x61\x74\x65\x2E\x6E\x6F\x77\x28\x29\x2F\x31\x30\x30\x30\x29\x3B\x0A\x20\x20\x20\x20\x63\x6F\x6E\x73\x74\x20\x72\x65\x73\x20\x20\x20\x3D\x20\x61\x77\x61\x69\x74\x20\x66\x65\x74\x63\x68\x28\x0A\x20\x20\x20\x20\x20\x20\x20\x20\x60\x2F\x63\x68\x65\x63\x6B\x73\x3F\x73\x74\x61\x72\x74\x3D\x24\x7B\x63\x75\x72\x72\x65\x6E\x74\x54\x69\x6D\x65\x73\x74\x61\x6D\x70\x49\x6E\x53\x65\x63\x73\x20\x2D\x20\x74\x69\x6D\x65\x57\x69\x6E\x64\x6F\x77\x49\x6E\x53\x65\x63\x73\x7D\x60\x20\x2B\x0A\x20\x20\x20\x20\x20\x20\x20\x20\x60\x26\x65\x6E\x64\x3D\x24\x7B\x63\x75\x72\x72\x65\x6E\x74\x54\x69\x6D\x65\x73\x74\x61\x6D\x70\x49\x6E\x53\x65\x63\x73\x7D\x60\x29\x3B\x0A\x20\x20\x20\x20\x63\x6F\x6E\x73\x74\x20\x69\x74\x65\x6D\x73\x20\x3D\x20\x61\x77\x61\x69\x74\x20\x72\x65\x73\x2E\x6A\x73\x6F\x6E\x28\x29\x3B\x0A\x0A\x20\x20\x20\x20\x63\x6F\x6E\x73\x74\x20\x61\x67\x67\x72\x65\x67\x61\x74\x65\x73\x20\x3D\x20\x7B\x7D\x3B\x0A\x20\x20\x20\x20\x66\x6F\x72\x20\x28\x63\x6F\x6E\x73\x74\x20\x69\x74\x65\x6D\x20\x6F\x66\x20\x69\x74\x65\x6D\x73\x29\x20\x7B\x0A\x20\x20\x20\x20\x20\x20\x20\x20\x63\x6F\x6E\x73\x74\x20\x74\x20\x3D\x20\x69\x74\x65\x6D\x2E\x74\x69\x6D\x65\x73\x74\x61\x6D\x70\x3B\x0A\x20\x20\x20\x20\x20\x20\x20\x20\x66\x6F\x72\x20\x28\x63\x6F\x6E\x73\x74\x20\x63\x68\x65\x63\x6B\x20\x6F\x66\x20\x69\x74\x65\x6D\x2E\x63\x68\x65\x63\x6B\x73\x29\x20\x7B\x0A\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x6C\x65\x74\x20\x69\x64\x2C\x20\x79\x2C\x20\x73\x74\x61\x74\x75\x73\x3B\x0A\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x73\x77\x69\x74\x63\x68\x20\x28\x63\x68\x65\x63\x6B\x2E\x74\x79\x70\x65\x29\x20\x7B\x0A\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x63\x61\x73\x65\x20\x43\x48\x45\x43\x4B\x5F\x54\x59\x50\x45\x5F\x52\x45\x51\x55\x45\x53\x54\x5F\x55\x52\x4C\x3A\x0A\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x69\x64\x20\x3D\x20\x60\x24\x7B\x63\x68\x65\x63\x6B\x2E\x75\x72\x6C\x7D\x20\xE2\x80\x94\x20\x52\x65\x71\x75\x65\x73\x74\x73\x60\x3B\x0A\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x79\x20\x20\x3D\x20\x63\x68\x65\x63\x6B\x2E\x72\x65\x73\x70\x6F\x6E\x73\x65\x5F\x74\x69\x6D\x65\x5F\x69\x6E\x5F\x73\x65\x63\x73\x3B\x0A\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x62\x72\x65\x61\x6B\x3B\x0A\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x7D\x0A\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x69\x66\x20\x28\x74\x79\x70\x65\x6F\x66\x20\x61\x67\x67\x72\x65\x67\x61\x74\x65\x73\x5B\x69\x64\x5D\x20\x3D\x3D\x3D\x20\x22\x75\x6E\x64\x65\x66\x69\x6E\x65\x64\x22\x29\x20\x7B\x0A\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x61\x67\x67\x72\x65\x67\x61\x74\x65\x73\x5B\x69\x64\x5D\x20\x3D\x20\x7B\x0A\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x74\x73\x3A\x20\x5B\x74\x5D\x2C\x0A\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x79\x73\x3A\x20\x5B\x79\x5D\x2C\x0A\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x73\x74\x61\x74\x75\x73\x65\x73\x3A\x20\x5B\x63\x68\x65\x63\x6B\x2E\x73\x74\x61\x74\x75\x73\x5D\x2C\x0A\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x7D\x3B\x0A\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x7D\x20\x65\x6C\x73\x65\x20\x7B\x0A\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x61\x67\x67\x72\x65\x67\x61\x74\x65\x73\x5B\x69\x64\x5D\x2E\x74\x73\x2E\x70\x75\x73\x68\x28\x74\x29\x3B\x0A\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x61\x67\x67\x72\x65\x67\x61\x74\x65\x73\x5B\x69\x64\x5D\x2E\x79\x73\x2E\x70\x75\x73\x68\x28\x79\x29\x3B\x0A\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x61\x67\x67\x72\x65\x67\x61\x74\x65\x73\x5B\x69\x64\x5D\x2E\x73\x74\x61\x74\x75\x73\x65\x73\x2E\x70\x75\x73\x68\x28\x63\x68\x65\x63\x6B\x2E\x73\x74\x61\x74\x75\x73\x29\x3B\x0A\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x7D\x0A\x20\x20\x20\x20\x20\x20\x20\x20\x7D\x0A\x20\x20\x20\x20\x7D\x0A\x0A\x20\x20\x20\x20\x63\x61\x6E\x76\x61\x73\x49\x64\x78\x20\x3D\x20\x30\x3B\x0A\x0A\x20\x20\x20\x20\x72\x65\x6E\x64\x65\x72\x41\x67\x67\x72\x65\x67\x61\x74\x65\x43\x68\x65\x63\x6B\x73\x28\x61\x67\x67\x72\x65\x67\x61\x74\x65\x73\x29\x3B\x0A\x0A\x20\x20\x20\x20\x61\x67\x67\x72\x65\x67\x61\x74\x65\x43\x68\x65\x63\x6B\x73\x20\x3D\x20\x61\x67\x67\x72\x65\x67\x61\x74\x65\x73\x3B\x0A\x7D\x0A\x0A\x66\x75\x6E\x63\x74\x69\x6F\x6E\x20\x72\x65\x6E\x64\x65\x72\x41\x67\x67\x72\x65\x67\x61\x74\x65\x43\x68\x65\x63\x6B\x73\x28\x61\x67\x67\x72\x65\x67\x61\x74\x65\x73\x29\x20\x7B\x0A\x20\x20\x20\x20\x63\x6F\x6E\x73\x74\x20\x63\x68\x65\x63\x6B\x73\x45\x6C\x20\x3D\x20\x64\x6F\x63\x75\x6D\x65\x6E\x74\x2E\x67\x65\x74\x45\x6C\x65\x6D\x65\x6E\x74\x42\x79\x49\x64\x28\x22\x63\x68\x65\x63\x6B\x73\x22\x29\x3B\x0A\x20\x20\x20\x20\x63\x68\x65\x63\x6B\x73\x45\x6C\x2E\x69\x6E\x6E\x65\x72\x48\x54\x4D\x4C\x20\x3D\x20\x22\x22\x3B\x0A\x0A\x20\x20\x20\x20\x66\x6F\x72\x20\x28\x63\x6F\x6E\x73\x74\x20\x5B\x69\x64\x2C\x20\x61\x67\x67\x72\x65\x67\x61\x74\x65\x5D\x20\x6F\x66\x20\x4F\x62\x6A\x65\x63\x74\x2E\x65\x6E\x74\x72\x69\x65\x73\x28\x61\x67\x67\x72\x65\x67\x61\x74\x65\x73\x29\x29\x20\x7B\x0A\x20\x20\x20\x20\x20\x20\x20\x20\x63\x6F\x6E\x73\x74\x20\x65\x6C\x20\x3D\x20\x64\x6F\x63\x75\x6D\x65\x6E\x74\x2E\x63\x72\x65\x61\x74\x65\x45\x6C\x65\x6D\x65\x6E\x74\x28\x22\x64\x69\x76\x22\x29\x3B\x0A\x20\x20\x20\x20\x20\x20\x20\x20\x2F\x2F\x20\x53\x74\x61\x74\x75\x73\x20\x6C\x69\x6E\x65\x20\x61\x6E\x64\x20\x64\x65\x73\x63\x72\x69\x70\x74\x69\x6F\x6E\x0A\x20\x20\x20\x20\x20\x20\x20\x20\x7B\x0A\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x63\x6F\x6E\x73\x74\x20\x73\x74\x61\x74\x75\x73\x41\x6E\x64\x44\x65\x73\x63\x72\x69\x70\x74\x69\x6F\x6E\x4C\x69\x6E\x65\x45\x6C\x20\x3D\x20\x64\x6F\x63\x75\x6D\x65\x6E\x74\x2E\x63\x72\x65\x61\x74\x65\x45\x6C\x65\x6D\x65\x6E\x74\x28\x22\x64\x69\x76\x22\x29\x3B\x0A\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x73\x74\x61\x74\x75\x73\x41\x6E\x64\x44\x65\x73\x63\x72\x69\x70\x74\x69\x6F\x6E\x4C\x69\x6E\x65\x45\x6C\x2E\x63\x6C\x61\x73\x73\x4C\x69\x73\x74\x2E\x61\x64\x64\x28\x22\x73\x74\x61\x74\x75\x73\x2D\x61\x6E\x64\x2D\x64\x65\x73\x63\x72\x69\x70\x74\x69\x6F\x6E\x2D\x6C\x69\x6E\x65\x22\x29\x3B\x0A\x0A\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x63\x6F\x6E\x73\x74\x20\x6C\x61\x73\x74\x53\x74\x61\x74\x75\x73\x20\x3D\x20\x61\x67\x67\x72\x65\x67\x61\x74\x65\x2E\x73\x74\x61\x74\x75\x73\x65\x73\x5B\x61\x67\x67\x72\x65\x67\x61\x74\x65\x2E\x73\x74\x61\x74\x75\x73\x65\x73\x2E\x6C\x65\x6E\x67\x74\x68\x20\x2D\x20\x31\x5D\x3B\x0A\x0A\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x63\x6F\x6E\x73\x74\x20\x73\x74\x61\x74\x75\x73\x50\x69\x6C\x6C\x20\x3D\x20\x64\x6F\x63\x75\x6D\x65\x6E\x74\x2E\x63\x72\x65\x61\x74\x65\x45\x6C\x65\x6D\x65\x6E\x74\x28\x22\x73\x70\x61\x6E\x22\x29\x3B\x0A\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x73\x74\x61\x74\x75\x73\x50\x69\x6C\x6C\x2E\x63\x6C\x61\x73\x73\x4C\x69\x73\x74\x2E\x61\x64\x64\x28\x22\x73\x74\x61\x74\x75\x73\x2D\x70\x69\x6C\x6C\x22\x29\x3B\x0A\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x69\x66\x20\x28\x6C\x61\x73\x74\x53\x74\x61\x74\x75\x73\x20\x3D\x3D\x3D\x20\x53\x54\x41\x54\x55\x53\x5F\x53\x55\x43\x43\x45\x45\x44\x45\x44\x29\x20\x7B\x0A\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x73\x74\x61\x74\x75\x73\x50\x69\x6C\x6C\x2E\x63\x6C\x61\x73\x73\x4C\x69\x73\x74\x2E\x61\x64\x64\x28\x22\x73\x74\x61\x74\x75\x73\x2D\x70\x69\x6C\x6C\x2D\x2D\x73\x75\x63\x63\x65\x65\x64\x65\x64\x22\x29\x3B\x0A\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x7D\x20\x65\x6C\x73\x65\x20\x7B\x0A\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x73\x74\x61\x74\x75\x73\x50\x69\x6C\x6C\x2E\x63\x6C\x61\x73\x73\x4C\x69\x73\x74\x2E\x61\x64\x64\x28\x22\x73\x74\x61\x74\x75\x73\x2D\x70\x69\x6C\x6C\x2D\x2D\x66\x61\x69\x6C\x65\x64\x22\x29\x3B\x0A\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x7D\x0A\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x73\x74\x61\x74\x75\x73\x50\x69\x6C\x6C\x2E\x61\x70\x70\x65\x6E\x64\x43\x68\x69\x6C\x64\x28\x64\x6F\x63\x75\x6D\x65\x6E\x74\x2E\x63\x72\x65\x61\x74\x65\x54\x65\x78\x74\x4E\x6F\x64\x65\x28\x60\x4C\x61\x73\x74\x20\x24\x7B\x6C\x61\x73\x74\x53\x74\x61\x74\x75\x73\x7D\x60\x29\x29\x3B\x0A\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x73\x74\x61\x74\x75\x73\x41\x6E\x64\x44\x65\x73\x63\x72\x69\x70\x74\x69\x6F\x6E\x4C\x69\x6E\x65\x45\x6C\x2E\x61\x70\x70\x65\x6E\x64\x43\x68\x69\x6C\x64\x28\x73\x74\x61\x74\x75\x73\x50\x69\x6C\x6C\x29\x3B\x0A\x0A\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x73\x74\x61\x74\x75\x73\x41\x6E\x64\x44\x65\x73\x63\x72\x69\x70\x74\x69\x6F\x6E\x4C\x69\x6E\x65\x45\x6C\x2E\x61\x70\x70\x65\x6E\x64\x43\x68\x69\x6C\x64\x28\x64\x6F\x63\x75\x6D\x65\x6E\x74\x2E\x63\x72\x65\x61\x74\x65\x54\x65\x78\x74\x4E\x6F\x64\x65\x28\x69\x64\x29\x29\x3B\x0A\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x73\x74\x61\x74\x75\x73\x41\x6E\x64\x44\x65\x73\x63\x72\x69\x70\x74\x69\x6F\x6E\x4C\x69\x6E\x65\x45\x6C\x2E\x61\x70\x70\x65\x6E\x64\x43\x68\x69\x6C\x64\x28\x64\x6F\x63\x75\x6D\x65\x6E\x74\x2E\x63\x72\x65\x61\x74\x65\x45\x6C\x65\x6D\x65\x6E\x74\x28\x22\x62\x72\x22\x29\x29\x3B\x0A\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x65\x6C\x2E\x61\x70\x70\x65\x6E\x64\x43\x68\x69\x6C\x64\x28\x73\x74\x61\x74\x75\x73\x41\x6E\x64\x44\x65\x73\x63\x72\x69\x70\x74\x69\x6F\x6E\x4C\x69\x6E\x65\x45\x6C\x29\x3B\x0A\x20\x20\x20\x20\x20\x20\x20\x20\x7D\x0A\x0A\x20\x20\x20\x20\x20\x20\x20\x20\x2F\x2F\x20\x54\x69\x6D\x65\x73\x65\x72\x69\x65\x73\x20\x63\x61\x6E\x76\x61\x73\x0A\x20\x20\x20\x20\x20\x20\x20\x20\x63\x6F\x6E\x73\x74\x20\x63\x61\x6E\x76\x61\x73\x45\x6C\x20\x3D\x20\x64\x6F\x63\x75\x6D\x65\x6E\x74\x2E\x63\x72\x65\x61\x74\x65\x45\x6C\x65\x6D\x65\x6E\x74\x28\x22\x63\x61\x6E\x76\x61\x73\x22\x29\x3B\x0A\x20\x20\x20\x20\x20\x20\x20\x20\x63\x61\x6E\x76\x61\x73\x45\x6C\x2E\x73\x74\x79\x6C\x65\x2E\x77\x69\x64\x74\x68\x20\x20\x3D\x20\x60\x24\x7B\x63\x68\x65\x63\x6B\x73\x45\x6C\x2E\x63\x6C\x69\x65\x6E\x74\x57\x69\x64\x74\x68\x7D\x70\x78\x60\x3B\x0A\x20\x20\x20\x20\x20\x20\x20\x20\x63\x61\x6E\x76\x61\x73\x45\x6C\x2E\x73\x74\x79\x6C\x65\x2E\x68\x65\x69\x67\x68\x74\x20\x3D\x20\x22\x36\x34\x70\x78\x22\x3B\x0A\x20\x20\x20\x20\x20\x20\x20\x20\x63\x61\x6E\x76\x61\x73\x45\x6C\x2E\x73\x65\x74\x41\x74\x74\x72\x69\x62\x75\x74\x65\x28\x22\x69\x64\x22\x2C\x20\x60\x43\x61\x6E\x76\x61\x73\x20\x66\x6F\x72\x20\x24\x7B\x69\x64\x7D\x60\x29\x3B\x0A\x20\x20\x20\x20\x20\x20\x20\x20\x65\x6C\x2E\x61\x70\x70\x65\x6E\x64\x43\x68\x69\x6C\x64\x28\x63\x61\x6E\x76\x61\x73\x45\x6C\x29\x3B\x0A\x0A\x20\x20\x20\x20\x20\x20\x20\x20\x65\x6C\x2E\x61\x70\x70\x65\x6E\x64\x43\x68\x69\x6C\x64\x28\x64\x6F\x63\x75\x6D\x65\x6E\x74\x2E\x63\x72\x65\x61\x74\x65\x45\x6C\x65\x6D\x65\x6E\x74\x28\x22\x62\x72\x22\x29\x29\x3B\x0A\x0A\x20\x20\x20\x20\x20\x20\x20\x20\x2F\x2F\x20\x54\x69\x6D\x65\x73\x65\x72\x69\x65\x73\x20\x22\x73\x63\x72\x75\x62\x22\x20\x68\x65\x61\x64\x0A\x20\x20\x20\x20\x20\x20\x20\x20\x63\x6F\x6E\x73\x74\x20\x73\x72\x75\x62\x48\x65\x61\x64\x44\x61\x74\x65\x74\x69\x6D\x65\x45\x6C\x20\x3D\x20\x64\x6F\x63\x75\x6D\x65\x6E\x74\x2E\x63\x72\x65\x61\x74\x65\x45\x6C\x65\x6D\x65\x6E\x74\x28\x22\x73\x70\x61\x6E\x22\x29\x3B\x0A\x20\x20\x20\x20\x20\x20\x20\x20\x73\x72\x75\x62\x48\x65\x61\x64\x44\x61\x74\x65\x74\x69\x6D\x65\x45\x6C\x2E\x61\x70\x70\x65\x6E\x64\x43\x68\x69\x6C\x64\x28\x64\x6F\x63\x75\x6D\x65\x6E\x74\x2E\x63\x72\x65\x61\x74\x65\x54\x65\x78\x74\x4E\x6F\x64\x65\x28\x0A\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x64\x61\x74\x65\x46\x72\x6F\x6D\x54\x69\x6D\x65\x73\x74\x61\x6D\x70\x28\x63\x75\x72\x72\x65\x6E\x74\x54\x69\x6D\x65\x73\x74\x61\x6D\x70\x49\x6E\x53\x65\x63\x73\x29\x2E\x74\x6F\x4C\x6F\x63\x61\x6C\x65\x53\x74\x72\x69\x6E\x67\x28\x29\x0A\x20\x20\x20\x20\x20\x20\x20\x20\x29\x29\x3B\x0A\x20\x20\x20\x20\x20\x20\x20\x20\x65\x6C\x2E\x61\x70\x70\x65\x6E\x64\x43\x68\x69\x6C\x64\x28\x73\x72\x75\x62\x48\x65\x61\x64\x44\x61\x74\x65\x74\x69\x6D\x65\x45\x6C\x29\x3B\x0A\x0A\x20\x20\x20\x20\x20\x20\x20\x20\x65\x6C\x2E\x61\x70\x70\x65\x6E\x64\x43\x68\x69\x6C\x64\x28\x64\x6F\x63\x75\x6D\x65\x6E\x74\x2E\x63\x72\x65\x61\x74\x65\x45\x6C\x65\x6D\x65\x6E\x74\x28\x22\x62\x72\x22\x29\x29\x3B\x0A\x20\x20\x20\x20\x20\x20\x20\x20\x65\x6C\x2E\x61\x70\x70\x65\x6E\x64\x43\x68\x69\x6C\x64\x28\x64\x6F\x63\x75\x6D\x65\x6E\x74\x2E\x63\x72\x65\x61\x74\x65\x45\x6C\x65\x6D\x65\x6E\x74\x28\x22\x62\x72\x22\x29\x29\x3B\x0A\x0A\x20\x20\x20\x20\x20\x20\x20\x20\x2F\x2F\x20\x2D\x2D\x2D\x2D\x2D\x2D\x2D\x2D\x2D\x2D\x2D\x2D\x2D\x2D\x2D\x2D\x2D\x2D\x2D\x2D\x2D\x2D\x2D\x2D\x2D\x2D\x2D\x2D\x2D\x2D\x2D\x2D\x2D\x2D\x2D\x2D\x2D\x2D\x2D\x2D\x2D\x2D\x2D\x2D\x2D\x2D\x2D\x2D\x2D\x2D\x2D\x2D\x2D\x2D\x2D\x2D\x2D\x2D\x2D\x0A\x0A\x20\x20\x20\x20\x20\x20\x20\x20\x63\x68\x65\x63\x6B\x73\x45\x6C\x2E\x61\x70\x70\x65\x6E\x64\x43\x68\x69\x6C\x64\x28\x65\x6C\x29\x3B\x0A\x0A\x20\x20\x20\x20\x20\x20\x20\x20\x63\x6F\x6E\x73\x74\x20\x63\x74\x78\x20\x3D\x20\x63\x61\x6E\x76\x61\x73\x45\x6C\x2E\x67\x65\x74\x43\x6F\x6E\x74\x65\x78\x74\x28\x22\x32\x64\x22\x29\x3B\x0A\x20\x20\x20\x20\x20\x20\x20\x20\x72\x65\x6E\x64\x65\x72\x54\x69\x6D\x65\x53\x65\x72\x69\x65\x73\x43\x61\x6E\x76\x61\x73\x28\x61\x67\x67\x72\x65\x67\x61\x74\x65\x2C\x20\x63\x74\x78\x2C\x20\x63\x61\x6E\x76\x61\x73\x45\x6C\x29\x3B\x0A\x0A\x20\x20\x20\x20\x20\x20\x20\x20\x63\x61\x6E\x76\x61\x73\x45\x6C\x2E\x61\x64\x64\x45\x76\x65\x6E\x74\x4C\x69\x73\x74\x65\x6E\x65\x72\x28\x22\x6D\x6F\x75\x73\x65\x6D\x6F\x76\x65\x22\x2C\x20\x66\x75\x6E\x63\x74\x69\x6F\x6E\x20\x6D\x6F\x76\x65\x53\x63\x72\x75\x62\x48\x65\x61\x64\x28\x65\x76\x65\x6E\x74\x29\x20\x7B\x0A\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x63\x6F\x6E\x73\x74\x20\x63\x61\x6E\x76\x61\x73\x53\x74\x61\x74\x65\x20\x3D\x20\x67\x65\x74\x43\x61\x6E\x76\x61\x73\x53\x74\x61\x74\x65\x28\x61\x67\x67\x72\x65\x67\x61\x74\x65\x2E\x69\x64\x29\x3B\x0A\x0A\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x63\x61\x6E\x76\x61\x73\x53\x74\x61\x74\x65\x2E\x74\x53\x63\x72\x75\x62\x48\x65\x61\x64\x20\x3D\x0A\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x28\x65\x76\x65\x6E\x74\x2E\x6F\x66\x66\x73\x65\x74\x58\x2F\x63\x61\x6E\x76\x61\x73\x45\x6C\x2E\x63\x6C\x69\x65\x6E\x74\x57\x69\x64\x74\x68\x29\x0A\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x2A\x28\x63\x61\x6E\x76\x61\x73\x53\x74\x61\x74\x65\x2E\x74\x4D\x61\x78\x20\x2D\x20\x63\x61\x6E\x76\x61\x73\x53\x74\x61\x74\x65\x2E\x74\x4D\x69\x6E\x29\x0A\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x2B\x20\x63\x61\x6E\x76\x61\x73\x53\x74\x61\x74\x65\x2E\x74\x4D\x69\x6E\x3B\x0A\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x73\x72\x75\x62\x48\x65\x61\x64\x44\x61\x74\x65\x74\x69\x6D\x65\x45\x6C\x2E\x69\x6E\x6E\x65\x72\x48\x54\x4D\x4C\x20\x3D\x20\x22\x22\x3B\x0A\x0A\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x73\x72\x75\x62\x48\x65\x61\x64\x44\x61\x74\x65\x74\x69\x6D\x65\x45\x6C\x2E\x61\x70\x70\x65\x6E\x64\x43\x68\x69\x6C\x64\x28\x64\x6F\x63\x75\x6D\x65\x6E\x74\x2E\x63\x72\x65\x61\x74\x65\x54\x65\x78\x74\x4E\x6F\x64\x65\x28\x0A\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x64\x61\x74\x65\x46\x72\x6F\x6D\x54\x69\x6D\x65\x73\x74\x61\x6D\x70\x28\x63\x61\x6E\x76\x61\x73\x53\x74\x61\x74\x65\x2E\x74\x53\x63\x72\x75\x62\x48\x65\x61\x64\x29\x2E\x74\x6F\x4C\x6F\x63\x61\x6C\x65\x53\x74\x72\x69\x6E\x67\x28\x29\x0A\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x29\x29\x3B\x0A\x0A\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x72\x65\x6E\x64\x65\x72\x54\x69\x6D\x65\x53\x65\x72\x69\x65\x73\x43\x61\x6E\x76\x61\x73\x28\x61\x67\x67\x72\x65\x67\x61\x74\x65\x2C\x20\x63\x74\x78\x2C\x20\x63\x61\x6E\x76\x61\x73\x45\x6C\x29\x3B\x0A\x20\x20\x20\x20\x20\x20\x20\x20\x7D\x29\x3B\x0A\x20\x20\x20\x20\x7D\x0A\x7D\x0A\x0A\x66\x75\x6E\x63\x74\x69\x6F\x6E\x20\x72\x65\x6E\x64\x65\x72\x54\x69\x6D\x65\x53\x65\x72\x69\x65\x73\x43\x61\x6E\x76\x61\x73\x28\x61\x67\x67\x72\x65\x67\x61\x74\x65\x2C\x20\x63\x74\x78\x2C\x20\x63\x61\x6E\x76\x61\x73\x45\x6C\x29\x20\x7B\x0A\x20\x20\x20\x20\x63\x6F\x6E\x73\x74\x20\x7B\x69\x64\x2C\x20\x74\x73\x2C\x20\x79\x73\x2C\x20\x73\x74\x61\x74\x75\x73\x65\x73\x7D\x20\x3D\x20\x61\x67\x67\x72\x65\x67\x61\x74\x65\x3B\x0A\x0A\x20\x20\x20\x20\x63\x6F\x6E\x73\x74\x20\x63\x61\x6E\x76\x61\x73\x53\x74\x61\x74\x65\x20\x3D\x20\x67\x65\x74\x43\x61\x6E\x76\x61\x73\x53\x74\x61\x74\x65\x28\x69\x64\x29\x3B\x0A\x0A\x20\x20\x20\x20\x63\x61\x6E\x76\x61\x73\x45\x6C\x2E\x77\x69\x64\x74\x68\x20\x20\x3D\x20\x63\x61\x6E\x76\x61\x73\x45\x6C\x2E\x63\x6C\x69\x65\x6E\x74\x57\x69\x64\x74\x68\x3B\x0A\x20\x20\x20\x20\x63\x61\x6E\x76\x61\x73\x45\x6C\x2E\x68\x65\x69\x67\x68\x74\x20\x3D\x20\x63\x61\x6E\x76\x61\x73\x45\x6C\x2E\x63\x6C\x69\x65\x6E\x74\x48\x65\x69\x67\x68\x74\x3B\x0A\x0A\x20\x20\x20\x20\x6C\x65\x74\x20\x74\x4D\x69\x6E\x20\x3D\x20\x74\x73\x5B\x30\x5D\x3B\x0A\x20\x20\x20\x20\x6C\x65\x74\x20\x74\x4D\x61\x78\x20\x3D\x20\x63\x75\x72\x72\x65\x6E\x74\x54\x69\x6D\x65\x73\x74\x61\x6D\x70\x49\x6E\x53\x65\x63\x73\x3B\x0A\x20\x20\x20\x20\x63\x6F\x6E\x73\x74\x20\x70\x78\x50\x65\x72\x53\x65\x63\x20\x3D\x20\x63\x61\x6E\x76\x61\x73\x45\x6C\x2E\x77\x69\x64\x74\x68\x2F\x28\x74\x4D\x61\x78\x20\x2D\x20\x74\x4D\x69\x6E\x29\x3B\x0A\x20\x20\x20\x20\x63\x6F\x6E\x73\x74\x20\x6D\x61\x78\x59\x20\x3D\x20\x4D\x61\x74\x68\x2E\x6D\x61\x78\x28\x2E\x2E\x2E\x79\x73\x29\x3B\x0A\x20\x20\x20\x20\x63\x61\x6E\x76\x61\x73\x53\x74\x61\x74\x65\x2E\x74\x4D\x69\x6E\x20\x3D\x20\x74\x4D\x69\x6E\x3B\x0A\x20\x20\x20\x20\x63\x61\x6E\x76\x61\x73\x53\x74\x61\x74\x65\x2E\x74\x4D\x61\x78\x20\x3D\x20\x74\x4D\x61\x78\x3B\x0A\x0A\x20\x20\x20\x20\x66\x75\x6E\x63\x74\x69\x6F\x6E\x20\x64\x72\x61\x77\x56\x65\x72\x74\x69\x63\x61\x6C\x4C\x69\x6E\x65\x28\x74\x2C\x20\x68\x65\x69\x67\x68\x74\x29\x20\x7B\x0A\x20\x20\x20\x20\x20\x20\x20\x20\x63\x6F\x6E\x73\x74\x20\x78\x20\x3D\x20\x28\x74\x20\x2D\x20\x74\x4D\x69\x6E\x29\x2A\x70\x78\x50\x65\x72\x53\x65\x63\x3B\x0A\x0A\x20\x20\x20\x20\x20\x20\x20\x20\x63\x74\x78\x2E\x62\x65\x67\x69\x6E\x50\x61\x74\x68\x28\x29\x3B\x0A\x20\x20\x20\x20\x20\x20\x20\x20\x63\x74\x78\x2E\x6D\x6F\x76\x65\x54\x6F\x28\x78\x2C\x20\x63\x61\x6E\x76\x61\x73\x45\x6C\x2E\x68\x65\x69\x67\x68\x74\x29\x3B\x0A\x20\x20\x20\x20\x20\x20\x20\x20\x63\x74\x78\x2E\x6C\x69\x6E\x65\x54\x6F\x28\x78\x2C\x20\x63\x61\x6E\x76\x61\x73\x45\x6C\x2E\x68\x65\x69\x67\x68\x74\x20\x2D\x20\x68\x65\x69\x67\x68\x74\x29\x3B\x0A\x20\x20\x20\x20\x20\x20\x20\x20\x63\x74\x78\x2E\x73\x74\x72\x6F\x6B\x65\x28\x29\x3B\x0A\x20\x20\x20\x20\x7D\x0A\x0A\x20\x20\x20\x20\x2F\x2F\x20\x46\x69\x6C\x6C\x20\x62\x61\x63\x6B\x67\x72\x6F\x75\x6E\x64\x0A\x20\x20\x20\x20\x63\x74\x78\x2E\x66\x69\x6C\x6C\x53\x74\x79\x6C\x65\x20\x3D\x20\x22\x23\x32\x32\x32\x22\x3B\x0A\x20\x20\x20\x20\x63\x74\x78\x2E\x66\x69\x6C\x6C\x52\x65\x63\x74\x28\x30\x2C\x20\x30\x2C\x20\x63\x61\x6E\x76\x61\x73\x45\x6C\x2E\x77\x69\x64\x74\x68\x2C\x20\x63\x61\x6E\x76\x61\x73\x45\x6C\x2E\x68\x65\x69\x67\x68\x74\x29\x3B\x0A\x0A\x20\x20\x20\x20\x2F\x2F\x20\x44\x72\x61\x77\x20\x64\x61\x79\x2C\x20\x36\x20\x68\x6F\x75\x72\x20\x61\x6E\x64\x20\x31\x20\x68\x6F\x75\x72\x20\x72\x75\x6C\x65\x73\x0A\x20\x20\x20\x20\x6C\x65\x74\x20\x64\x61\x79\x20\x3D\x20\x6E\x65\x77\x20\x44\x61\x74\x65\x28\x29\x3B\x0A\x20\x20\x20\x20\x64\x61\x79\x2E\x73\x65\x74\x54\x69\x6D\x65\x28\x74\x4D\x61\x78\x2A\x31\x30\x30\x30\x29\x3B\x0A\x20\x20\x20\x20\x64\x61\x79\x2E\x73\x65\x74\x44\x61\x74\x65\x28\x64\x61\x79\x2E\x67\x65\x74\x44\x61\x74\x65\x28\x29\x20\x2B\x20\x31\x29\x3B\x0A\x20\x20\x20\x20\x64\x61\x79\x2E\x73\x65\x74\x48\x6F\x75\x72\x73\x28\x30\x29\x3B\x0A\x20\x20\x20\x20\x64\x61\x79\x2E\x73\x65\x74\x4D\x69\x6E\x75\x74\x65\x73\x28\x30\x29\x3B\x0A\x20\x20\x20\x20\x64\x61\x79\x2E\x73\x65\x74\x53\x65\x63\x6F\x6E\x64\x73\x28\x30\x29\x3B\x0A\x20\x20\x20\x20\x64\x61\x79\x2E\x73\x65\x74\x4D\x69\x6C\x6C\x69\x73\x65\x63\x6F\x6E\x64\x73\x28\x30\x29\x3B\x0A\x20\x20\x20\x20\x77\x68\x69\x6C\x65\x20\x28\x64\x61\x79\x2E\x67\x65\x74\x54\x69\x6D\x65\x28\x29\x2F\x31\x30\x30\x30\x20\x3E\x20\x74\x4D\x69\x6E\x29\x20\x7B\x0A\x20\x20\x20\x20\x20\x20\x20\x20\x63\x74\x78\x2E\x6C\x69\x6E\x65\x57\x69\x64\x74\x68\x20\x3D\x20\x32\x3B\x0A\x20\x20\x20\x20\x20\x20\x20\x20\x63\x74\x78\x2E\x73\x74\x72\x6F\x6B\x65\x53\x74\x79\x6C\x65\x20\x3D\x20\x22\x23\x30\x30\x30\x22\x3B\x0A\x20\x20\x20\x20\x20\x20\x20\x20\x64\x72\x61\x77\x56\x65\x72\x74\x69\x63\x61\x6C\x4C\x69\x6E\x65\x28\x64\x61\x79\x2E\x67\x65\x74\x54\x69\x6D\x65\x28\x29\x2F\x31\x30\x30\x30\x2C\x20\x63\x61\x6E\x76\x61\x73\x45\x6C\x2E\x68\x65\x69\x67\x68\x74\x29\x3B\x0A\x20\x20\x20\x20\x20\x20\x20\x20\x64\x61\x79\x20\x3D\x20\x6E\x65\x77\x20\x44\x61\x74\x65\x28\x64\x61\x79\x29\x3B\x0A\x20\x20\x20\x20\x20\x20\x20\x20\x64\x61\x79\x2E\x73\x65\x74\x44\x61\x74\x65\x28\x64\x61\x79\x2E\x67\x65\x74\x44\x61\x74\x65\x28\x29\x20\x2D\x20\x31\x29\x3B\x0A\x20\x20\x20\x20\x7D\x0A\x20\x20\x20\x20\x6C\x65\x74\x20\x68\x6F\x75\x72\x20\x3D\x20\x6E\x65\x77\x20\x44\x61\x74\x65\x28\x29\x3B\x0A\x20\x20\x20\x20\x68\x6F\x75\x72\x2E\x73\x65\x74\x54\x69\x6D\x65\x28\x74\x4D\x61\x78\x2A\x31\x30\x30\x30\x29\x3B\x0A\x20\x20\x20\x20\x68\x6F\x75\x72\x2E\x73\x65\x74\x48\x6F\x75\x72\x73\x28\x68\x6F\x75\x72\x2E\x67\x65\x74\x48\x6F\x75\x72\x73\x28\x29\x20\x2B\x20\x28\x36\x20\x2D\x20\x68\x6F\x75\x72\x2E\x67\x65\x74\x48\x6F\x75\x72\x73\x28\x29\x25\x36\x29\x29\x3B\x0A\x20\x20\x20\x20\x68\x6F\x75\x72\x2E\x73\x65\x74\x4D\x69\x6E\x75\x74\x65\x73\x28\x30\x29\x3B\x0A\x20\x20\x20\x20\x68\x6F\x75\x72\x2E\x73\x65\x74\x53\x65\x63\x6F\x6E\x64\x73\x28\x30\x29\x3B\x0A\x20\x20\x20\x20\x68\x6F\x75\x72\x2E\x73\x65\x74\x4D\x69\x6C\x6C\x69\x73\x65\x63\x6F\x6E\x64\x73\x28\x30\x29\x3B\x0A\x20\x20\x20\x20\x77\x68\x69\x6C\x65\x20\x28\x68\x6F\x75\x72\x2E\x67\x65\x74\x54\x69\x6D\x65\x28\x29\x2F\x31\x30\x30\x30\x20\x3E\x20\x74\x4D\x69\x6E\x29\x20\x7B\x0A\x20\x20\x20\x20\x20\x20\x20\x20\x63\x74\x78\x2E\x6C\x69\x6E\x65\x57\x69\x64\x74\x68\x20\x3D\x20\x31\x3B\x0A\x20\x20\x20\x20\x20\x20\x20\x20\x63\x74\x78\x2E\x73\x74\x72\x6F\x6B\x65\x53\x74\x79\x6C\x65\x20\x3D\x20\x22\x23\x30\x30\x30\x22\x3B\x0A\x20\x20\x20\x20\x20\x20\x20\x20\x63\x74\x78\x2E\x73\x65\x74\x4C\x69\x6E\x65\x44\x61\x73\x68\x28\x5B\x36\x2C\x20\x32\x5D\x29\x3B\x0A\x20\x20\x20\x20\x20\x20\x20\x20\x63\x74\x78\x2E\x62\x65\x67\x69\x6E\x50\x61\x74\x68\x28\x29\x3B\x0A\x20\x20\x20\x20\x20\x20\x20\x20\x64\x72\x61\x77\x56\x65\x72\x74\x69\x63\x61\x6C\x4C\x69\x6E\x65\x28\x68\x6F\x75\x72\x2E\x67\x65\x74\x54\x69\x6D\x65\x28\x29\x2F\x31\x30\x30\x30\x2C\x20\x63\x61\x6E\x76\x61\x73\x45\x6C\x2E\x68\x65\x69\x67\x68\x74\x29\x3B\x0A\x20\x20\x20\x20\x20\x20\x20\x20\x68\x6F\x75\x72\x20\x3D\x20\x6E\x65\x77\x20\x44\x61\x74\x65\x28\x68\x6F\x75\x72\x29\x3B\x0A\x20\x20\x20\x20\x20\x20\x20\x20\x68\x6F\x75\x72\x2E\x73\x65\x74\x48\x6F\x75\x72\x73\x28\x68\x6F\x75\x72\x2E\x67\x65\x74\x48\x6F\x75\x72\x73\x28\x29\x20\x2D\x20\x36\x29\x3B\x0A\x20\x20\x20\x20\x7D\x0A\x20\x20\x20\x20\x68\x6F\x75\x72\x20\x3D\x20\x6E\x65\x77\x20\x44\x61\x74\x65\x28\x29\x3B\x0A\x20\x20\x20\x20\x68\x6F\x75\x72\x2E\x73\x65\x74\x54\x69\x6D\x65\x28\x74\x4D\x61\x78\x2A\x31\x30\x30\x30\x29\x3B\x0A\x20\x20\x20\x20\x68\x6F\x75\x72\x2E\x73\x65\x74\x48\x6F\x75\x72\x73\x28\x68\x6F\x75\x72\x2E\x67\x65\x74\x48\x6F\x75\x72\x73\x28\x29\x20\x2B\x20\x31\x29\x3B\x0A\x20\x20\x20\x20\x68\x6F\x75\x72\x2E\x73\x65\x74\x4D\x69\x6E\x75\x74\x65\x73\x28\x30\x29\x3B\x0A\x20\x20\x20\x20\x68\x6F\x75\x72\x2E\x73\x65\x74\x53\x65\x63\x6F\x6E\x64\x73\x28\x30\x29\x3B\x0A\x20\x20\x20\x20\x68\x6F\x75\x72\x2E\x73\x65\x74\x4D\x69\x6C\x6C\x69\x73\x65\x63\x6F\x6E\x64\x73\x28\x30\x29\x3B\x0A\x20\x20\x20\x20\x77\x68\x69\x6C\x65\x20\x28\x68\x6F\x75\x72\x2E\x67\x65\x74\x54\x69\x6D\x65\x28\x29\x2F\x31\x30\x30\x30\x20\x3E\x20\x74\x4D\x69\x6E\x29\x20\x7B\x0A\x20\x20\x20\x20\x20\x20\x20\x20\x63\x74\x78\x2E\x6C\x69\x6E\x65\x57\x69\x64\x74\x68\x20\x3D\x20\x32\x3B\x0A\x20\x20\x20\x20\x20\x20\x20\x20\x63\x74\x78\x2E\x73\x74\x72\x6F\x6B\x65\x53\x74\x79\x6C\x65\x20\x3D\x20\x22\x23\x30\x30\x30\x22\x3B\x0A\x20\x20\x20\x20\x20\x20\x20\x20\x63\x74\x78\x2E\x73\x65\x74\x4C\x69\x6E\x65\x44\x61\x73\x68\x28\x5B\x32\x2C\x20\x37\x5D\x29\x3B\x0A\x20\x20\x20\x20\x20\x20\x20\x20\x64\x72\x61\x77\x56\x65\x72\x74\x69\x63\x61\x6C\x4C\x69\x6E\x65\x28\x68\x6F\x75\x72\x2E\x67\x65\x74\x54\x69\x6D\x65\x28\x29\x2F\x31\x30\x30\x30\x2C\x20\x63\x61\x6E\x76\x61\x73\x45\x6C\x2E\x68\x65\x69\x67\x68\x74\x29\x3B\x0A\x20\x20\x20\x20\x20\x20\x20\x20\x68\x6F\x75\x72\x20\x3D\x20\x6E\x65\x77\x20\x44\x61\x74\x65\x28\x68\x6F\x75\x72\x29\x3B\x0A\x20\x20\x20\x20\x20\x20\x20\x20\x68\x6F\x75\x72\x2E\x73\x65\x74\x48\x6F\x75\x72\x73\x28\x68\x6F\x75\x72\x2E\x67\x65\x74\x48\x6F\x75\x72\x73\x28\x29\x20\x2D\x20\x31\x29\x3B\x0A\x20\x20\x20\x20\x7D\x0A\x0A\x20\x20\x20\x20\x2F\x2F\x20\x44\x72\x61\x77\x20\x73\x63\x72\x75\x62\x20\x68\x65\x61\x64\x20\x72\x75\x6C\x65\x0A\x20\x20\x20\x20\x63\x74\x78\x2E\x6C\x69\x6E\x65\x57\x69\x64\x74\x68\x20\x3D\x20\x32\x3B\x0A\x20\x20\x20\x20\x63\x74\x78\x2E\x73\x74\x72\x6F\x6B\x65\x53\x74\x79\x6C\x65\x20\x3D\x20\x22\x23\x46\x46\x46\x22\x3B\x0A\x20\x20\x20\x20\x63\x74\x78\x2E\x73\x65\x74\x4C\x69\x6E\x65\x44\x61\x73\x68\x28\x5B\x5D\x29\x3B\x0A\x20\x20\x20\x20\x64\x72\x61\x77\x56\x65\x72\x74\x69\x63\x61\x6C\x4C\x69\x6E\x65\x28\x63\x61\x6E\x76\x61\x73\x53\x74\x61\x74\x65\x2E\x74\x53\x63\x72\x75\x62\x48\x65\x61\x64\x2C\x20\x63\x61\x6E\x76\x61\x73\x45\x6C\x2E\x68\x65\x69\x67\x68\x74\x29\x3B\x0A\x0A\x20\x20\x20\x20\x2F\x2F\x20\x44\x72\x61\x77\x20\x22\x70\x69\x6E\x73\x22\x20\x66\x6F\x72\x20\x74\x69\x6D\x65\x73\x65\x72\x69\x65\x73\x20\x76\x61\x6C\x75\x65\x73\x2E\x0A\x20\x20\x20\x20\x2F\x2F\x20\x44\x72\x61\x77\x6E\x20\x69\x6E\x20\x32\x20\x70\x61\x73\x73\x65\x73\x20\x73\x6F\x20\x74\x68\x61\x74\x20\x74\x68\x65\x20\x70\x69\x6E\x73\x20\x66\x6F\x72\x20\x66\x61\x69\x6C\x75\x72\x65\x73\x20\x61\x72\x65\x20\x64\x72\x61\x77\x6E\x20\x69\x6E\x20\x66\x72\x6F\x6E\x74\x20\x6F\x66\x0A\x20\x20\x20\x20\x2F\x2F\x20\x74\x68\x6F\x73\x65\x20\x66\x6F\x72\x20\x73\x75\x63\x63\x65\x73\x73\x65\x65\x73\x2E\x0A\x20\x20\x20\x20\x66\x6F\x72\x20\x28\x63\x6F\x6E\x73\x74\x20\x5B\x73\x74\x61\x74\x75\x73\x5F\x66\x6F\x72\x5F\x64\x72\x61\x77\x5F\x70\x61\x73\x73\x2C\x20\x63\x6F\x6C\x6F\x72\x5D\x20\x6F\x66\x20\x5B\x0A\x20\x20\x20\x20\x20\x20\x20\x20\x5B\x53\x54\x41\x54\x55\x53\x5F\x53\x55\x43\x43\x45\x45\x44\x45\x44\x2C\x20\x22\x23\x46\x30\x30\x22\x5D\x2C\x0A\x20\x20\x20\x20\x20\x20\x20\x20\x5B\x53\x54\x41\x54\x55\x53\x5F\x46\x41\x49\x4C\x45\x44\x20\x20\x20\x2C\x20\x22\x23\x30\x46\x46\x22\x5D\x2C\x0A\x20\x20\x20\x20\x5D\x29\x20\x7B\x0A\x20\x20\x20\x20\x20\x20\x20\x20\x66\x6F\x72\x20\x28\x6C\x65\x74\x20\x69\x20\x3D\x20\x30\x3B\x20\x69\x20\x3C\x20\x74\x73\x2E\x6C\x65\x6E\x67\x74\x68\x3B\x20\x2B\x2B\x69\x29\x20\x7B\x0A\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x63\x6F\x6E\x73\x74\x20\x73\x74\x61\x74\x75\x73\x20\x3D\x20\x73\x74\x61\x74\x75\x73\x65\x73\x5B\x69\x5D\x3B\x0A\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x69\x66\x20\x28\x73\x74\x61\x74\x75\x73\x20\x21\x3D\x20\x73\x74\x61\x74\x75\x73\x5F\x66\x6F\x72\x5F\x64\x72\x61\x77\x5F\x70\x61\x73\x73\x29\x20\x63\x6F\x6E\x74\x69\x6E\x75\x65\x3B\x0A\x0A\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x63\x6F\x6E\x73\x74\x20\x74\x20\x3D\x20\x74\x73\x5B\x69\x5D\x3B\x0A\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x63\x6F\x6E\x73\x74\x20\x79\x20\x3D\x20\x79\x73\x5B\x69\x5D\x3B\x0A\x0A\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x63\x6F\x6E\x73\x74\x20\x70\x69\x6E\x54\x6F\x70\x52\x61\x64\x69\x75\x73\x20\x3D\x20\x34\x3B\x0A\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x63\x6F\x6E\x73\x74\x20\x70\x69\x6E\x58\x20\x20\x20\x20\x20\x20\x20\x20\x20\x3D\x20\x28\x74\x20\x2D\x20\x74\x4D\x69\x6E\x29\x2A\x70\x78\x50\x65\x72\x53\x65\x63\x3B\x0A\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x63\x6F\x6E\x73\x74\x20\x70\x69\x6E\x48\x65\x69\x67\x68\x74\x20\x20\x20\x20\x3D\x20\x28\x79\x2F\x6D\x61\x78\x59\x29\x2A\x28\x63\x61\x6E\x76\x61\x73\x45\x6C\x2E\x68\x65\x69\x67\x68\x74\x20\x2D\x20\x32\x2A\x70\x69\x6E\x54\x6F\x70\x52\x61\x64\x69\x75\x73\x29\x20\x2B\x20\x70\x69\x6E\x54\x6F\x70\x52\x61\x64\x69\x75\x73\x3B\x0A\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x63\x6F\x6E\x73\x74\x20\x70\x69\x6E\x43\x6F\x6C\x6F\x72\x20\x20\x20\x20\x20\x3D\x20\x73\x74\x61\x74\x75\x73\x20\x3D\x3D\x3D\x20\x53\x54\x41\x54\x55\x53\x5F\x46\x41\x49\x4C\x45\x44\x20\x3F\x20\x22\x23\x46\x30\x30\x22\x20\x3A\x20\x22\x23\x30\x46\x46\x22\x3B\x0A\x0A\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x63\x74\x78\x2E\x6C\x69\x6E\x65\x57\x69\x64\x74\x68\x20\x3D\x20\x32\x3B\x0A\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x63\x74\x78\x2E\x73\x74\x72\x6F\x6B\x65\x53\x74\x79\x6C\x65\x20\x3D\x20\x70\x69\x6E\x43\x6F\x6C\x6F\x72\x3B\x0A\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x63\x74\x78\x2E\x73\x65\x74\x4C\x69\x6E\x65\x44\x61\x73\x68\x28\x5B\x5D\x29\x3B\x0A\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x64\x72\x61\x77\x56\x65\x72\x74\x69\x63\x61\x6C\x4C\x69\x6E\x65\x28\x74\x2C\x20\x70\x69\x6E\x48\x65\x69\x67\x68\x74\x29\x3B\x0A\x0A\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x63\x74\x78\x2E\x66\x69\x6C\x6C\x53\x74\x79\x6C\x65\x20\x3D\x20\x70\x69\x6E\x43\x6F\x6C\x6F\x72\x3B\x0A\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x63\x74\x78\x2E\x62\x65\x67\x69\x6E\x50\x61\x74\x68\x28\x29\x3B\x0A\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x63\x74\x78\x2E\x61\x72\x63\x28\x70\x69\x6E\x58\x2C\x20\x63\x61\x6E\x76\x61\x73\x45\x6C\x2E\x68\x65\x69\x67\x68\x74\x20\x2D\x20\x70\x69\x6E\x48\x65\x69\x67\x68\x74\x2C\x20\x70\x69\x6E\x54\x6F\x70\x52\x61\x64\x69\x75\x73\x2C\x20\x30\x2C\x20\x33\x36\x30\x2C\x20\x30\x29\x3B\x0A\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x63\x74\x78\x2E\x66\x69\x6C\x6C\x28\x29\x3B\x0A\x20\x20\x20\x20\x20\x20\x20\x20\x7D\x0A\x20\x20\x20\x20\x7D\x0A\x0A\x20\x20\x20\x20\x63\x61\x6E\x76\x61\x73\x49\x64\x78\x2B\x2B\x3B\x0A\x7D\x0A\x0A\x66\x75\x6E\x63\x74\x69\x6F\x6E\x20\x67\x65\x74\x43\x61\x6E\x76\x61\x73\x53\x74\x61\x74\x65\x28\x63\x68\x65\x63\x6B\x73\x41\x67\x67\x72\x65\x67\x61\x74\x65\x49\x64\x29\x20\x7B\x0A\x20\x20\x20\x20\x6C\x65\x74\x20\x73\x74\x61\x74\x65\x20\x3D\x20\x63\x61\x6E\x76\x61\x73\x53\x74\x61\x74\x65\x42\x79\x43\x68\x65\x63\x6B\x73\x41\x67\x67\x72\x65\x61\x74\x65\x49\x64\x2E\x67\x65\x74\x28\x63\x68\x65\x63\x6B\x73\x41\x67\x67\x72\x65\x67\x61\x74\x65\x49\x64\x29\x3B\x0A\x20\x20\x20\x20\x69\x66\x20\x28\x74\x79\x70\x65\x6F\x66\x20\x73\x74\x61\x74\x65\x20\x3D\x3D\x3D\x20\x22\x75\x6E\x64\x65\x66\x69\x6E\x65\x64\x22\x29\x20\x7B\x0A\x20\x20\x20\x20\x20\x20\x20\x20\x73\x74\x61\x74\x65\x20\x3D\x20\x7B\x0A\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x74\x4D\x69\x6E\x3A\x20\x2D\x31\x2C\x0A\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x74\x4D\x61\x78\x3A\x20\x2D\x31\x2C\x0A\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x74\x53\x63\x72\x75\x62\x48\x65\x61\x64\x3A\x20\x63\x75\x72\x72\x65\x6E\x74\x54\x69\x6D\x65\x73\x74\x61\x6D\x70\x49\x6E\x53\x65\x63\x73\x2C\x0A\x20\x20\x20\x20\x20\x20\x20\x20\x7D\x3B\x0A\x20\x20\x20\x20\x20\x20\x20\x20\x63\x61\x6E\x76\x61\x73\x53\x74\x61\x74\x65\x42\x79\x43\x68\x65\x63\x6B\x73\x41\x67\x67\x72\x65\x61\x74\x65\x49\x64\x2E\x73\x65\x74\x28\x63\x68\x65\x63\x6B\x73\x41\x67\x67\x72\x65\x67\x61\x74\x65\x49\x64\x2C\x20\x73\x74\x61\x74\x65\x29\x3B\x0A\x20\x20\x20\x20\x7D\x0A\x20\x20\x20\x20\x72\x65\x74\x75\x72\x6E\x20\x73\x74\x61\x74\x65\x3B\x0A\x7D\x0A\x0A\x66\x75\x6E\x63\x74\x69\x6F\x6E\x20\x64\x61\x74\x65\x46\x72\x6F\x6D\x54\x69\x6D\x65\x73\x74\x61\x6D\x70\x28\x74\x69\x6D\x65\x73\x74\x61\x6D\x70\x29\x20\x7B\x0A\x20\x20\x20\x20\x63\x6F\x6E\x73\x74\x20\x64\x61\x74\x65\x20\x3D\x20\x6E\x65\x77\x20\x44\x61\x74\x65\x28\x29\x3B\x0A\x20\x20\x20\x20\x64\x61\x74\x65\x2E\x73\x65\x74\x54\x69\x6D\x65\x28\x74\x69\x6D\x65\x73\x74\x61\x6D\x70\x2A\x31\x30\x30\x30\x29\x3B\x0A\x20\x20\x20\x20\x72\x65\x74\x75\x72\x6E\x20\x64\x61\x74\x65\x3B\x0A\x7D\x0A\x0A\x6D\x61\x69\x6E\x28\x29\x3B\x0A\x0A"
